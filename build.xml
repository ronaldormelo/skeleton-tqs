<?xml version="1.0" encoding="UTF-8"?>
<project name="G2" default="build">

 <!-- By default, we assume all tools to be on the $PATH -->
 <property name="toolsdir" value="${basedir}/build/tools/"/>
 <property name="applicationDir" value="${basedir}/application"/>
 <property name="excludeDir" value="${basedir}/tests,${basedir}/scripts,${basedir}/library,${basedir}/docs,${basedir}/bin,${basedir}/public"/>

 <!-- Uncomment the following when the tools are in ${basedir}/vendor/bin -->
 <!-- <property name="toolsdir" value="${basedir}/vendor/bin/"/> -->

<target name="build" 
         depends="prepare,phpunit,lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci,phpdox,phpcb,in-case-of-failure,in-case-of-success"
         description=""/>

    <target name="prepare"
         unless="prepare.done"
         description="Prepara diretórios para build">

		<delete dir="${basedir}/build/logs"/>  
		<delete dir="${basedir}/build/codebrowser"/>  
		<delete dir="${basedir}/build/coverage"/>
		<delete dir="${basedir}/build/dependencies"/>
		<delete dir="${basedir}/build/api"/>		 

		<mkdir dir="${basedir}/build/logs"/>
		<mkdir dir="${basedir}/build/codebrowser"/>
		<mkdir dir="${basedir}/build/coverage"/>
		<mkdir dir="${basedir}/build/dependencies"/>
<!--	<mkdir dir="tests/build/output"/> -->
		<mkdir dir="${basedir}/build/api"/>

		<!--Seta as permissões nas pastas -->
        <chmod dir="${basedir}/build" perm="0755"/>
        <chmod dir="${basedir}/build/logs" perm="0755"/>
        <chmod dir="${basedir}/build/codebrowser" perm="0755"/>
		<chmod dir="${basedir}/build/coverage" perm="0755"/>
        <chmod dir="${basedir}/build/dependencies" perm="0755"/>
        <chmod dir="${basedir}/build/api" perm="0755"/>
		
		<property name="prepare.done" value="true"/>
	</target>
		 	 	
	<!-- PHPUnit -->	
	<target name="phpunit" description="Executa os testes unitarios">
        <exec executable="${toolsdir}phpunit.phar" failonerror="true">
            <arg line="--configuration ${basedir}/build/phpunit.xml"/>
        </exec>
    </target>

	<!-- PHPLINT CI -->
	<target name="lint"
         unless="lint.done"
         description="Executa a verificação de sintaxe dos fontes">
		<!-- Verificar atributo failonerror="false" -->
    	
		<apply executable="php" failonerror="true" taskname="lint">
			<arg value="-l" />

			<fileset dir="${applicationDir}">
				<include name="**/*.php" />				
                <include name="**/*.phtml"/>
				<modified />
			</fileset>
			
			<fileset dir="${basedir}/library/G2">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
			
		</apply>

		<property name="lint.done" value="false"/>
	</target>

 <!-- PHPLOC CI -->
    <target name="phploc-ci"
         unless="phploc.done"
         depends="prepare"
         description="Mede o tamanho do projeto usando PHPLOC e registra o log em CSV e XML. Destinado para uso dentro de um ambiente de integração contínua.">
		
		<!-- Verificar atributo failonerror="false" -->
		<exec executable="${toolsdir}phploc.phar" taskname="phploc">
	  
			<arg value="--exclude" />
			<arg path="${excludeDir}" />
			
			<!--
			<arg value="--ignore" />
			<arg path="${excludeDir}" />
			-->
			<arg value="--count-tests" />

			<arg value="--log-csv" />
			<arg path="${basedir}/build/logs/phploc.csv" />

			<arg value="--log-xml" />
			<arg path="${basedir}/build/logs/phploc.xml" />

			<arg path="${basedir}"/>   
		</exec>

		<property name="phploc.done" value="false"/>
	</target>

	<!-- PDEPEND -->
    <target name="pdepend"
         unless="pdepend.done"
         depends="prepare"
         description="Calcula métricas de software usando PHP_Depend e registra o log em formato XML. Destinado para uso dentro de um ambiente de integração contínua.">

		 <!-- Verificar atributo failonerror="false" -->
		<exec executable="${toolsdir}pdepend.phar" taskname="pdepend">

			
			<arg value="--ignore=${excludeDir}" />
			
			<arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />

			<arg value="--jdepend-chart=${basedir}/build/dependencies/dependencies.svg" />   

			<arg value="--overview-pyramid=${basedir}/build/dependencies/overview-pyramid.svg" />       

			<arg value="--suffix=php" />

			<arg path="${basedir}" />
		   
		</exec>

		<property name="pdepend.done" value="true"/>
	</target>
 
	<!-- PHPMD-CI -->
    <target name="phpmd-ci"
         unless="phpmd.done"
         depends="prepare"
         description="Realiza a detecção de código inútil no projeto usando PHPMD. Destinado para uso dentro de um ambiente de integração contínua.">
		
		<!-- Verificar atributo failonerror="false" -->		
		<exec executable="${toolsdir}phpmd.phar" taskname="phpmd">
		   
			<arg path="${basedir}" />

			<arg value="xml" />   
			<arg path="${basedir}/build/phpmd.xml" />
		   
			<arg value="--reportfile-xml" />   
			<arg path="${basedir}/build/logs/pmd.xml" />
			
			<arg value="--reportfile-html" />   
			<arg path="${basedir}/build/logs/pmd.html" />
		   
			<arg value="--exclude" />
			<arg value="${excludeDir}" />
			
			<!--
			<arg value="--ignore" />
			<arg value="${excludeDir}" />
			-->
		   
		</exec>

		<property name="phpmd.done" value="true"/>
	</target>

	<!-- PHPCS CI -->
    <target name="phpcs-ci"
         unless="phpcs.done"
         depends="prepare"
         description="Encontra violações de codigo usando PHP_CodeSniffer e salva o log em formato XML. Destinado para uso dentro de um ambiente de integração contínua.">
		 
		<!-- Verificar atributo failonerror="false" -->
		<exec executable="${toolsdir}phpcs.phar" output="/dev/null" taskname="phpcs">
		  
		   <arg value="--report=checkstyle" />
		   
		   <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
		   
		   <arg value="--standard=PSR2" />
		   
		   <arg value="--ignore=${excludeDir}" /> -->
		   
		   <arg value="--extensions=php" />
		   
		   <arg path="${basedir}" />         
		</exec>

		<property name="phpcs.done" value="false"/>
	</target>

 <!-- PHPCPD CI -->
    <target name="phpcpd-ci"
         unless="phpcpd.done"
         depends="prepare"
         description="Encontra código duplicado usando PHPCPD e salva o log em formato XML. Destinado para uso dentro de um ambiente de integração contínua.">
		 
		<!-- Verificar atributo failonerror="false" --> 
		<exec executable="${toolsdir}phpcpd.phar" taskname="phpcpd">
		  
		   <arg value="--log-pmd" />
		   <arg path="${basedir}/build/logs/pmd-cpd.xml" />
		   
		   <arg value="--exclude" />
		   <arg path="${excludeDir}" />
		   
		   <arg path="${basedir}" />  
		</exec>

		<property name="phpcpd.done" value="false"/>
	</target> 

	<!-- PHPDOX -->
    <target name="phpdox"
         unless="phpdox.done"
         depends="phploc-ci, phpcs-ci"
         description="Gerar documentação do projeto usando phpDox">
		<exec executable="${toolsdir}phpdox.phar" dir="${basedir}/build" taskname="phpdox"/>

		<property name="phpdox.done" value="false"/>
	</target>
		
	<!-- PHPCB -->	
	<target name="phpcb">
        <exec executable="${toolsdir}phpcb.phar" failonerror="false">
            <arg line="--log ${basedir}/build/logs --source ${basedir}/application --output ${basedir}/build/codebrowser"/>
        </exec>
    </target>
 
	<target name="in-case-of-success" if="buildsuccess">
        <echo>Build OK</echo>
    </target>
	
    <target name="in-case-of-failure" if="buildfailed">
        <fail>Build Fail</fail>
    </target>
 
</project>